#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 VertexPosition_modelspace;
layout(location = 1) in vec2 VertexUV;
layout(location = 2) in vec3 VertexNormal_modelspace;

out vec3 Normal_cameraspace;
out vec3 EyeDirection_cameraspace;
out vec3 LightDirection_cameraspace;
out vec3 Position_worldspace;
out vec3 Normal_worldspace;
out vec3 EyeDirection_worldspace;

// Values that stay constant for the whole mesh.
uniform mat4 MVP;
uniform mat4 ModelMatrix;
uniform mat4 ViewMatrix;
uniform vec3 LightPosition_worldspace;
uniform vec3 CameraPosition;

void main(){
	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  MVP * vec4(VertexPosition_modelspace,1);
	
	//calculate vertexPosition world
	Position_worldspace = (ModelMatrix * vec4( VertexPosition_modelspace , 1)).xyz;
	
	vec3 VertexPosition_cameraspace =(ViewMatrix * ModelMatrix * vec4(VertexPosition_modelspace,1)).xyz;
	//calcuate eye direction
	EyeDirection_cameraspace = vec3(0,0,0) - VertexPosition_cameraspace;
	EyeDirection_worldspace = CameraPosition - Position_worldspace;

	vec3 LightPosition_cameraspace = (ViewMatrix * vec4(LightPosition_worldspace, 1)).xyz; 
	LightDirection_cameraspace = LightPosition_cameraspace + EyeDirection_cameraspace;
	
	Normal_cameraspace = ( ViewMatrix * transpose(ModelMatrix) * vec4(VertexNormal_modelspace,0)).xyz; 
	Normal_worldspace = (ModelMatrix * vec4(VertexNormal_modelspace, 0)).xyz;

}

